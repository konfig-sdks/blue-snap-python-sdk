# coding: utf-8

"""
    API Settings

    At BlueSnap, we look at payments a little differently. Our Payment Orchestration Platform helps businesses accept payments globally and is designed to increase revenue and reduces costs. We provide a comprehensive back-end solutions that simplifies the complexity of payments, managing the full process from start to finish.  BlueSnap supports payments through multiple sales channels such as online and mobile sales, marketplaces, subscriptions, invoice payments and manual orders through a virtual terminal. And for businesses looking for embedded payments, we offer white-labeled payments for platforms with automated underwriting and onboarding that supports marketplaces and split payments.  And with one integration and contract, businesses can sell in over 200 geographies with access to local acquiring in 47 countries, 110+ currencies and 100+ global payment types, including popular eWallets, automated accounts receivable, world-class fraud protection and chargeback management, built-in solutions for regulation and tax compliance, and unified global reporting to help businesses grow.  With a US headquarters in Waltham, MA, and EU headquarters in Dublin, Ireland, BlueSnap is backed by world-class private equity investors including Great Hill Partners and Parthenon Capital Partners.   Learn more at BlueSnap.com

    The version of the OpenAPI document: 8976-Tools
    Generated by: https://konfigthis.com
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from pydantic import RootModel
from blue_snap_python_sdk.request_before_hook import request_before_hook
import json
from urllib3._collections import HTTPHeaderDict

from blue_snap_python_sdk.api_response import AsyncGeneratorResponse
from blue_snap_python_sdk import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from blue_snap_python_sdk import schemas  # noqa: F401

from blue_snap_python_sdk.model.vendor_update_vendor_request_payout_info import VendorUpdateVendorRequestPayoutInfo as VendorUpdateVendorRequestPayoutInfoSchema
from blue_snap_python_sdk.model.vendor_update_vendor_request import VendorUpdateVendorRequest as VendorUpdateVendorRequestSchema
from blue_snap_python_sdk.model.vendor_update_vendor_request_vendor_principal import VendorUpdateVendorRequestVendorPrincipal as VendorUpdateVendorRequestVendorPrincipalSchema
from blue_snap_python_sdk.model.vendor_update_vendor_request_vendor_agreement import VendorUpdateVendorRequestVendorAgreement as VendorUpdateVendorRequestVendorAgreementSchema

from blue_snap_python_sdk.type.vendor_update_vendor_request_payout_info import VendorUpdateVendorRequestPayoutInfo
from blue_snap_python_sdk.type.vendor_update_vendor_request_vendor_principal import VendorUpdateVendorRequestVendorPrincipal
from blue_snap_python_sdk.type.vendor_update_vendor_request_vendor_agreement import VendorUpdateVendorRequestVendorAgreement
from blue_snap_python_sdk.type.vendor_update_vendor_request import VendorUpdateVendorRequest

from ...api_client import Dictionary
from blue_snap_python_sdk.pydantic.vendor_update_vendor_request import VendorUpdateVendorRequest as VendorUpdateVendorRequestPydantic
from blue_snap_python_sdk.pydantic.vendor_update_vendor_request_payout_info import VendorUpdateVendorRequestPayoutInfo as VendorUpdateVendorRequestPayoutInfoPydantic
from blue_snap_python_sdk.pydantic.vendor_update_vendor_request_vendor_principal import VendorUpdateVendorRequestVendorPrincipal as VendorUpdateVendorRequestVendorPrincipalPydantic
from blue_snap_python_sdk.pydantic.vendor_update_vendor_request_vendor_agreement import VendorUpdateVendorRequestVendorAgreement as VendorUpdateVendorRequestVendorAgreementPydantic

# Path params
VendorIdSchema = schemas.Int32Schema
RequestRequiredPathParams = typing_extensions.TypedDict(
    'RequestRequiredPathParams',
    {
        'vendorId': typing.Union[VendorIdSchema, decimal.Decimal, int, ],
    }
)
RequestOptionalPathParams = typing_extensions.TypedDict(
    'RequestOptionalPathParams',
    {
    },
    total=False
)


class RequestPathParams(RequestRequiredPathParams, RequestOptionalPathParams):
    pass


request_path_vendor_id = api_client.PathParameter(
    name="vendorId",
    style=api_client.ParameterStyle.SIMPLE,
    schema=VendorIdSchema,
    required=True,
)
# body param
SchemaForRequestBodyApplicationJson = VendorUpdateVendorRequestSchema


request_body_vendor_update_vendor_request = api_client.RequestBody(
    content={
        'application/json': api_client.MediaType(
            schema=SchemaForRequestBodyApplicationJson),
    },
)


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    body: schemas.Unset = schemas.unset


@dataclass
class ApiResponseFor200Async(api_client.AsyncApiResponse):
    body: schemas.Unset = schemas.unset


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    response_cls_async=ApiResponseFor200Async,
)


class BaseApi(api_client.Api):

    def _update_vendor_mapped_args(
        self,
        vendor_id: int,
        email: typing.Optional[str] = None,
        name: typing.Optional[str] = None,
        first_name: typing.Optional[str] = None,
        last_name: typing.Optional[str] = None,
        address: typing.Optional[str] = None,
        city: typing.Optional[str] = None,
        zip: typing.Optional[str] = None,
        country: typing.Optional[str] = None,
        phone: typing.Optional[str] = None,
        state: typing.Optional[str] = None,
        tax_id: typing.Optional[int] = None,
        vendor_url: typing.Optional[str] = None,
        ipn_url: typing.Optional[str] = None,
        default_payout_currency: typing.Optional[str] = None,
        vendor_principal: typing.Optional[VendorUpdateVendorRequestVendorPrincipal] = None,
        payout_info: typing.Optional[VendorUpdateVendorRequestPayoutInfo] = None,
        vendor_agreement: typing.Optional[VendorUpdateVendorRequestVendorAgreement] = None,
    ) -> api_client.MappedArgs:
        args: api_client.MappedArgs = api_client.MappedArgs()
        _path_params = {}
        _body = {}
        if email is not None:
            _body["email"] = email
        if name is not None:
            _body["name"] = name
        if first_name is not None:
            _body["firstName"] = first_name
        if last_name is not None:
            _body["lastName"] = last_name
        if address is not None:
            _body["address"] = address
        if city is not None:
            _body["city"] = city
        if zip is not None:
            _body["zip"] = zip
        if country is not None:
            _body["country"] = country
        if phone is not None:
            _body["phone"] = phone
        if state is not None:
            _body["state"] = state
        if tax_id is not None:
            _body["taxId"] = tax_id
        if vendor_url is not None:
            _body["vendorUrl"] = vendor_url
        if ipn_url is not None:
            _body["ipnUrl"] = ipn_url
        if default_payout_currency is not None:
            _body["defaultPayoutCurrency"] = default_payout_currency
        if vendor_principal is not None:
            _body["vendorPrincipal"] = vendor_principal
        if payout_info is not None:
            _body["payoutInfo"] = payout_info
        if vendor_agreement is not None:
            _body["vendorAgreement"] = vendor_agreement
        args.body = _body
        if vendor_id is not None:
            _path_params["vendorId"] = vendor_id
        args.path = _path_params
        return args

    async def _aupdate_vendor_oapg(
        self,
        body: typing.Any = None,
            path_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        content_type: str = 'application/json',
        stream: bool = False,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        """
        Update Vendor
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestPathParams, path_params)
        used_path = path.value
    
        _path_params = {}
        for parameter in (
            request_path_vendor_id,
        ):
            parameter_data = path_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _path_params.update(serialized_data)
    
        for k, v in _path_params.items():
            used_path = used_path.replace('{%s}' % k, v)
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        method = 'put'.upper()
        _headers.add('Content-Type', content_type)
    
        _fields = None
        _body = None
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/vendors/{vendorId}',
            body=body,
            auth_settings=_auth,
            headers=_headers,
        )
        if body is not schemas.unset:
            serialized_data = request_body_vendor_update_vendor_request.serialize(body, content_type)
            if 'fields' in serialized_data:
                _fields = serialized_data['fields']
            elif 'body' in serialized_data:
                _body = serialized_data['body']
    
        response = await self.api_client.async_call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            fields=_fields,
            serialized_body=_body,
            body=body,
            auth_settings=_auth,
            timeout=timeout,
            **kwargs
        )
    
        if stream:
            if not 200 <= response.http_response.status <= 299:
                body = (await response.http_response.content.read()).decode("utf-8")
                raise exceptions.ApiStreamingException(
                    status=response.http_response.status,
                    reason=response.http_response.reason,
                    body=body,
                )
    
            async def stream_iterator():
                """
                iterates over response.http_response.content and closes connection once iteration has finished
                """
                async for line in response.http_response.content:
                    if line == b'\r\n':
                        continue
                    yield line
                response.http_response.close()
                await response.session.close()
            return AsyncGeneratorResponse(
                content=stream_iterator(),
                headers=response.http_response.headers,
                status=response.http_response.status,
                response=response.http_response
            )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = await response_for_status.deserialize_async(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserializationAsync(
                body=await response.http_response.json() if is_json else await response.http_response.text(),
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        # cleanup session / response
        response.http_response.close()
        await response.session.close()
    
        return api_response


    def _update_vendor_oapg(
        self,
        body: typing.Any = None,
            path_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        content_type: str = 'application/json',
        stream: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        """
        Update Vendor
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestPathParams, path_params)
        used_path = path.value
    
        _path_params = {}
        for parameter in (
            request_path_vendor_id,
        ):
            parameter_data = path_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _path_params.update(serialized_data)
    
        for k, v in _path_params.items():
            used_path = used_path.replace('{%s}' % k, v)
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        method = 'put'.upper()
        _headers.add('Content-Type', content_type)
    
        _fields = None
        _body = None
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/vendors/{vendorId}',
            body=body,
            auth_settings=_auth,
            headers=_headers,
        )
        if body is not schemas.unset:
            serialized_data = request_body_vendor_update_vendor_request.serialize(body, content_type)
            if 'fields' in serialized_data:
                _fields = serialized_data['fields']
            elif 'body' in serialized_data:
                _body = serialized_data['body']
    
        response = self.api_client.call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            fields=_fields,
            serialized_body=_body,
            body=body,
            auth_settings=_auth,
            timeout=timeout,
        )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = response_for_status.deserialize(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserialization(
                body=json.loads(response.http_response.data) if is_json else response.http_response.data,
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        return api_response


class UpdateVendorRaw(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    async def aupdate_vendor(
        self,
        vendor_id: int,
        email: typing.Optional[str] = None,
        name: typing.Optional[str] = None,
        first_name: typing.Optional[str] = None,
        last_name: typing.Optional[str] = None,
        address: typing.Optional[str] = None,
        city: typing.Optional[str] = None,
        zip: typing.Optional[str] = None,
        country: typing.Optional[str] = None,
        phone: typing.Optional[str] = None,
        state: typing.Optional[str] = None,
        tax_id: typing.Optional[int] = None,
        vendor_url: typing.Optional[str] = None,
        ipn_url: typing.Optional[str] = None,
        default_payout_currency: typing.Optional[str] = None,
        vendor_principal: typing.Optional[VendorUpdateVendorRequestVendorPrincipal] = None,
        payout_info: typing.Optional[VendorUpdateVendorRequestPayoutInfo] = None,
        vendor_agreement: typing.Optional[VendorUpdateVendorRequestVendorAgreement] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._update_vendor_mapped_args(
            vendor_id=vendor_id,
            email=email,
            name=name,
            first_name=first_name,
            last_name=last_name,
            address=address,
            city=city,
            zip=zip,
            country=country,
            phone=phone,
            state=state,
            tax_id=tax_id,
            vendor_url=vendor_url,
            ipn_url=ipn_url,
            default_payout_currency=default_payout_currency,
            vendor_principal=vendor_principal,
            payout_info=payout_info,
            vendor_agreement=vendor_agreement,
        )
        return await self._aupdate_vendor_oapg(
            body=args.body,
            path_params=args.path,
            **kwargs,
        )
    
    def update_vendor(
        self,
        vendor_id: int,
        email: typing.Optional[str] = None,
        name: typing.Optional[str] = None,
        first_name: typing.Optional[str] = None,
        last_name: typing.Optional[str] = None,
        address: typing.Optional[str] = None,
        city: typing.Optional[str] = None,
        zip: typing.Optional[str] = None,
        country: typing.Optional[str] = None,
        phone: typing.Optional[str] = None,
        state: typing.Optional[str] = None,
        tax_id: typing.Optional[int] = None,
        vendor_url: typing.Optional[str] = None,
        ipn_url: typing.Optional[str] = None,
        default_payout_currency: typing.Optional[str] = None,
        vendor_principal: typing.Optional[VendorUpdateVendorRequestVendorPrincipal] = None,
        payout_info: typing.Optional[VendorUpdateVendorRequestPayoutInfo] = None,
        vendor_agreement: typing.Optional[VendorUpdateVendorRequestVendorAgreement] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._update_vendor_mapped_args(
            vendor_id=vendor_id,
            email=email,
            name=name,
            first_name=first_name,
            last_name=last_name,
            address=address,
            city=city,
            zip=zip,
            country=country,
            phone=phone,
            state=state,
            tax_id=tax_id,
            vendor_url=vendor_url,
            ipn_url=ipn_url,
            default_payout_currency=default_payout_currency,
            vendor_principal=vendor_principal,
            payout_info=payout_info,
            vendor_agreement=vendor_agreement,
        )
        return self._update_vendor_oapg(
            body=args.body,
            path_params=args.path,
        )

class UpdateVendor(BaseApi):

    async def aupdate_vendor(
        self,
        vendor_id: int,
        email: typing.Optional[str] = None,
        name: typing.Optional[str] = None,
        first_name: typing.Optional[str] = None,
        last_name: typing.Optional[str] = None,
        address: typing.Optional[str] = None,
        city: typing.Optional[str] = None,
        zip: typing.Optional[str] = None,
        country: typing.Optional[str] = None,
        phone: typing.Optional[str] = None,
        state: typing.Optional[str] = None,
        tax_id: typing.Optional[int] = None,
        vendor_url: typing.Optional[str] = None,
        ipn_url: typing.Optional[str] = None,
        default_payout_currency: typing.Optional[str] = None,
        vendor_principal: typing.Optional[VendorUpdateVendorRequestVendorPrincipal] = None,
        payout_info: typing.Optional[VendorUpdateVendorRequestPayoutInfo] = None,
        vendor_agreement: typing.Optional[VendorUpdateVendorRequestVendorAgreement] = None,
        validate: bool = False,
        **kwargs,
    ) -> None:
        raw_response = await self.raw.aupdate_vendor(
            vendor_id=vendor_id,
            email=email,
            name=name,
            first_name=first_name,
            last_name=last_name,
            address=address,
            city=city,
            zip=zip,
            country=country,
            phone=phone,
            state=state,
            tax_id=tax_id,
            vendor_url=vendor_url,
            ipn_url=ipn_url,
            default_payout_currency=default_payout_currency,
            vendor_principal=vendor_principal,
            payout_info=payout_info,
            vendor_agreement=vendor_agreement,
            **kwargs,
        )
    
    
    def update_vendor(
        self,
        vendor_id: int,
        email: typing.Optional[str] = None,
        name: typing.Optional[str] = None,
        first_name: typing.Optional[str] = None,
        last_name: typing.Optional[str] = None,
        address: typing.Optional[str] = None,
        city: typing.Optional[str] = None,
        zip: typing.Optional[str] = None,
        country: typing.Optional[str] = None,
        phone: typing.Optional[str] = None,
        state: typing.Optional[str] = None,
        tax_id: typing.Optional[int] = None,
        vendor_url: typing.Optional[str] = None,
        ipn_url: typing.Optional[str] = None,
        default_payout_currency: typing.Optional[str] = None,
        vendor_principal: typing.Optional[VendorUpdateVendorRequestVendorPrincipal] = None,
        payout_info: typing.Optional[VendorUpdateVendorRequestPayoutInfo] = None,
        vendor_agreement: typing.Optional[VendorUpdateVendorRequestVendorAgreement] = None,
        validate: bool = False,
    ) -> None:
        raw_response = self.raw.update_vendor(
            vendor_id=vendor_id,
            email=email,
            name=name,
            first_name=first_name,
            last_name=last_name,
            address=address,
            city=city,
            zip=zip,
            country=country,
            phone=phone,
            state=state,
            tax_id=tax_id,
            vendor_url=vendor_url,
            ipn_url=ipn_url,
            default_payout_currency=default_payout_currency,
            vendor_principal=vendor_principal,
            payout_info=payout_info,
            vendor_agreement=vendor_agreement,
        )


class ApiForput(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    async def aput(
        self,
        vendor_id: int,
        email: typing.Optional[str] = None,
        name: typing.Optional[str] = None,
        first_name: typing.Optional[str] = None,
        last_name: typing.Optional[str] = None,
        address: typing.Optional[str] = None,
        city: typing.Optional[str] = None,
        zip: typing.Optional[str] = None,
        country: typing.Optional[str] = None,
        phone: typing.Optional[str] = None,
        state: typing.Optional[str] = None,
        tax_id: typing.Optional[int] = None,
        vendor_url: typing.Optional[str] = None,
        ipn_url: typing.Optional[str] = None,
        default_payout_currency: typing.Optional[str] = None,
        vendor_principal: typing.Optional[VendorUpdateVendorRequestVendorPrincipal] = None,
        payout_info: typing.Optional[VendorUpdateVendorRequestPayoutInfo] = None,
        vendor_agreement: typing.Optional[VendorUpdateVendorRequestVendorAgreement] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._update_vendor_mapped_args(
            vendor_id=vendor_id,
            email=email,
            name=name,
            first_name=first_name,
            last_name=last_name,
            address=address,
            city=city,
            zip=zip,
            country=country,
            phone=phone,
            state=state,
            tax_id=tax_id,
            vendor_url=vendor_url,
            ipn_url=ipn_url,
            default_payout_currency=default_payout_currency,
            vendor_principal=vendor_principal,
            payout_info=payout_info,
            vendor_agreement=vendor_agreement,
        )
        return await self._aupdate_vendor_oapg(
            body=args.body,
            path_params=args.path,
            **kwargs,
        )
    
    def put(
        self,
        vendor_id: int,
        email: typing.Optional[str] = None,
        name: typing.Optional[str] = None,
        first_name: typing.Optional[str] = None,
        last_name: typing.Optional[str] = None,
        address: typing.Optional[str] = None,
        city: typing.Optional[str] = None,
        zip: typing.Optional[str] = None,
        country: typing.Optional[str] = None,
        phone: typing.Optional[str] = None,
        state: typing.Optional[str] = None,
        tax_id: typing.Optional[int] = None,
        vendor_url: typing.Optional[str] = None,
        ipn_url: typing.Optional[str] = None,
        default_payout_currency: typing.Optional[str] = None,
        vendor_principal: typing.Optional[VendorUpdateVendorRequestVendorPrincipal] = None,
        payout_info: typing.Optional[VendorUpdateVendorRequestPayoutInfo] = None,
        vendor_agreement: typing.Optional[VendorUpdateVendorRequestVendorAgreement] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._update_vendor_mapped_args(
            vendor_id=vendor_id,
            email=email,
            name=name,
            first_name=first_name,
            last_name=last_name,
            address=address,
            city=city,
            zip=zip,
            country=country,
            phone=phone,
            state=state,
            tax_id=tax_id,
            vendor_url=vendor_url,
            ipn_url=ipn_url,
            default_payout_currency=default_payout_currency,
            vendor_principal=vendor_principal,
            payout_info=payout_info,
            vendor_agreement=vendor_agreement,
        )
        return self._update_vendor_oapg(
            body=args.body,
            path_params=args.path,
        )

